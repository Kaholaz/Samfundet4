from __future__ import annotations

from django.conf import settings
from django.utils import timezone

from django.contrib.auth.models import Permission
from django.core.management.base import BaseCommand

# pylint: disable=positional-arguments


def parse_permission_name(permission: Permission) -> str:
    """
    ```py
    SAMFUNDET_ADD_EVENT
    ```
    """
    return f'{permission.content_type.app_label}_{permission.codename}'.upper()


def parse_permission_value(permission: Permission) -> str:
    """
    ```py
    samfundet.add_event
    ```
    """
    return f'{permission.content_type.app_label}.{permission.codename}'


def parse_line(permission: Permission):
    """
    ```py
    SAMFUNDET_ADD_EVENT = 'samfundet.add_event'
    ```
    """
    name = parse_permission_name(permission=permission)
    value = parse_permission_value(permission=permission)
    line = f"{name} = '{value}'\n"
    return line


DOCSTRING = '"""'
YAPF_DISABLE = '# yapf: disable'
QUOTE = "'"
NEWLINE = '\n'
SEPARATOR = '#' * 60 + NEWLINE
FILE = 'root/utils/permission.py'

ENTRY_MSG = f"""
{DOCSTRING}
THIS FILE IS AUTOGENERATED.
DO NOT WRITE IN THIS FILE, AS IT WILL BE OVERWRITTEN ON NEXT UPDATE.

THIS FILE WAS GENERATED BY: {__name__}
LAST UPDATE: {timezone.now()}
{DOCSTRING}
"""


class Command(BaseCommand):
    """Generate frontend routes"""

    def handle(self, *args, **options) -> None:  # type: ignore

        with open(file=settings.BASE_DIR / FILE, mode='w', encoding='UTF-8') as file:
            # Write header.
            file.write(YAPF_DISABLE)
            file.write(ENTRY_MSG)
            file.write(NEWLINE)
            file.write(SEPARATOR)

            # Fetch all permissions.
            permissions = Permission.objects.all()

            current_app = None
            current_model = None

            for permission in permissions:

                # Write between different apps.
                if current_app != permission.content_type.app_label:
                    prev_app = current_app
                    current_app = permission.content_type.app_label

                    app_footer = f'### End: {prev_app} ###'
                    app_header = f'### {current_app} ###'

                    if prev_app:
                        file.write(app_footer)
                    file.write(NEWLINE * 2)
                    file.write(app_header)

                # Write between different models within app.
                if current_model != permission.content_type.model:
                    current_model = permission.content_type.model
                    file.write(NEWLINE)

                # Write permission.
                line = parse_line(permission=permission)
                file.write(line)
